package graph;

import graphdrawing.EadesSpringDrawer;

import java.util.Vector;
import java.util.Iterator;
import java.util.HashMap;

import java.util.Random;

import java.awt.Container;
import java.awt.Color;

public class Graph
{
  private Vector<Node> nodes;
  private Vector<Edge> edges;
  private Random random;
  private Container parent;

  private Color bgColor;

  private EadesSpringDrawer graphDrawer;

  public Graph(Container parent)
  {
    this.parent = parent;
    this.random = new Random();
    this.nodes = new Vector<Node>();
    this.edges = new Vector<Edge>();
    this.bgColor = Color.WHITE;

    this.graphDrawer = new EadesSpringDrawer(this);

    System.out.println("My panel is: " + parent);
    System.out.println("My canvas is: " + parent.getGraphics());
  }


  public void addNode(Node node)
  {
    this.nodes.add(node);
  }

  public void addEdge(Edge edge)
  {
    this.edges.add(edge);
  }

  public Vector<Node> getNodes()
  {
    return this.nodes;
  }

  public Vector<Edge> getEdges()
  {
    return this.edges;
  }

  public Node getRandomNode()
  {
    int index;

    if(nodes.isEmpty())
    {
      return null;
    }
    else
    {
      index = random.nextInt(this.nodes.size());
      return this.nodes.get(index);
    }
  }

  public boolean updateGraph()
  {
    this.graphDrawer.updateGraph();
    return this.graphDrawer.isStable();    
  }

  public void draw()
  {
    this.parent.getGraphics().setColor(this.bgColor);
    this.parent.getGraphics().clearRect(0, 0, this.parent.getWidth(), this.parent.getHeight());
    Iterator edgeIterator = this.edges.iterator();
    Iterator nodeIterator = this.nodes.iterator();
   
    while(edgeIterator.hasNext())
    {
      Edge e = (Edge) edgeIterator.next();
      e.draw(this.parent.getGraphics());
    }
   
    while(nodeIterator.hasNext())
    {
      Node n = (Node) nodeIterator.next();
      n.draw(this.parent.getGraphics());
    }
  }
}
